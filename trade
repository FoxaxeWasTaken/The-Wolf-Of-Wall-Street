#!/usr/bin/python3

import sys

def print_buy(pair: str, amount: float):
    print("A stack is being bought", file=sys.stderr)
    print(f'buy {pair} {amount}', flush=True)

def print_sell(pair: str, amount: float):
    print("A stack is being sold", file=sys.stderr)
    print(f'sell {pair} {amount}', flush=True)

class Stack:
    def __init__(self, amount: float, stop_loss: float, take_profit: float, pair: str, transactionFee: float):
        self.amount = amount * (1 - transactionFee)
        self.stop_loss = stop_loss
        self.take_profit = take_profit
        self.pair = pair
        self.transactionFee = transactionFee
        print_buy(pair, amount)

    def is_out_of_bounds(self, closing_price):
        if closing_price <= self.stop_loss or closing_price >= self.take_profit:
            return True
        return False

class Bot:
    def __init__(self, pair: str):
        self.botState = BotState()
        self.stacks = []
        self.pair = pair

    def run(self):
        while True:
            reading = input()
            if len(reading) == 0:
                continue
            self.parse(reading)

    def parse(self, info: str):
        tmp = info.split(" ")
        if tmp[0] == "settings":
            self.botState.update_settings(tmp[1], tmp[2])
        if tmp[0] == "update":
            if tmp[1] == "game":
                self.botState.update_game(tmp[2], tmp[3])
        if tmp[0] == "action":
            self.execute_action()

    def execute_action(self):
        current_closing_price = self.botState.charts[self.pair].closes[-1]
        if not self.check_stacks_bounds(current_closing_price):
            dollars = self.botState.stacks["USDT"]
            affordable = dollars / current_closing_price
            if dollars < 100:
                self.do_nothing()
            else:
                self.buy(affordable, current_closing_price * 0.90, current_closing_price * 1.10)

    def buy(self, amount: float, stop_loss: float, take_profit: float):
        self.stacks.append(Stack(amount, stop_loss, take_profit, self.pair, self.botState.transactionFee))

    def sell(self, amount: float = None):
        sum = 0
        if amount is None:
            amount = self.get_sum_of_stacks()
        if amount > self.get_sum_of_stacks():
            raise Exception("You are trying to sell more than you have")
        if amount < 0:
            raise Exception("You are trying to sell a negative amount")
        if amount == 0:
            raise Exception("You are trying to sell 0")
        while sum < amount:
            stack = self.stacks.pop(0)
            sum += stack.amount
        print_sell(self.pair, amount)

    def get_sum_of_stacks(self):
        sum = 0
        for stack in self.stacks:
            sum += stack.amount
        return sum

    def check_stacks_bounds(self, closing_price : float):
        sum = 0
        for stack in self.stacks:
            if stack.is_out_of_bounds(closing_price):
                sum += stack.amount
                self.stacks.remove(stack)
        if sum > 0:
            print_sell(self.pair, sum)
            return True
        return False

    def do_nothing(self):
        print("no_moves", flush=True)

class Candle:
    def __init__(self, format, intel):
        tmp = intel.split(",")
        for (i, key) in enumerate(format):
            value = tmp[i]
            if key == "pair":
                self.pair = value
            if key == "date":
                self.date = int(value)
            if key == "high":
                self.high = float(value)
            if key == "low":
                self.low = float(value)
            if key == "open":
                self.open = float(value)
            if key == "close":
                self.close = float(value)
            if key == "volume":
                self.volume = float(value)

    def __repr__(self):
        return str(self.pair) + str(self.date) + str(self.close) + str(self.volume)

class Chart:
    def __init__(self):
        self.dates = []
        self.opens = []
        self.highs = []
        self.lows = []
        self.closes = []
        self.volumes = []
        self.indicators = {}

    def add_candle(self, candle: Candle):
        self.dates.append(candle.date)
        self.opens.append(candle.open)
        self.highs.append(candle.high)
        self.lows.append(candle.low)
        self.closes.append(candle.close)
        self.volumes.append(candle.volume)

class BotState:
    def __init__(self):
        self.timeBank = 0
        self.maxTimeBank = 0
        self.timePerMove = 1
        self.candleInterval = 1
        self.candleFormat = []
        self.candlesTotal = 0
        self.candlesGiven = 0
        self.initialStack = 0
        self.transactionFee = 0.1
        self.date = 0
        self.stacks = dict()
        self.charts = dict()

    def update_chart(self, pair: str, new_candle_str: str):
        if not (pair in self.charts):
            self.charts[pair] = Chart()
        new_candle_obj = Candle(self.candleFormat, new_candle_str)
        self.charts[pair].add_candle(new_candle_obj)

    def update_stack(self, key: str, value: float):
        self.stacks[key] = value

    def update_settings(self, key: str, value: str):
        if key == "timebank":
            self.maxTimeBank = int(value)
            self.timeBank = int(value)
        if key == "time_per_move":
            self.timePerMove = int(value)
        if key == "candle_interval":
            self.candleInterval = int(value)
        if key == "candle_format":
            self.candleFormat = value.split(",")
        if key == "candles_total":
            self.candlesTotal = int(value)
        if key == "candles_given":
            self.candlesGiven = int(value)
        if key == "initial_stack":
            self.initialStack = int(value)
        if key == "transaction_fee_percent":
            self.transactionFee = float(value)

    def update_game(self, key: str, value: str):
        if key == "next_candles":
            new_candles = value.split(";")
            self.date = int(new_candles[0].split(",")[1])
            for candle_str in new_candles:
                candle_infos = candle_str.strip().split(",")
                self.update_chart(candle_infos[0], candle_str)
        if key == "stacks":
            new_stacks = value.split(",")
            for stack_str in new_stacks:
                stack_infos = stack_str.strip().split(":")
                self.update_stack(stack_infos[0], float(stack_infos[1]))

if __name__ == "__main__":
    try:
        mybot = Bot("USDT_BTC")
        mybot.run()
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(84)
